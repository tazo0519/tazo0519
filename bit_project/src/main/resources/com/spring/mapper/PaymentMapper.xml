<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.PaymentMapper">

	<!-- 구독결제 정보 -->
	<resultMap type="com.spring.payment.PaymentVO" id="PaymentResultMap">
		<result property="pay_num" column="pay_num" />
		<result property="customer_uid" column="customer_uid" />
		<result property="subscribe_num" column="subscribe_num" />
		<result property="pay_date" column="pay_date" />
		<result property="price" column="price" />
		<result property="point_price" column="point_price" />
		<result property="pay_price" column="pay_price" />
		<result property="merchant_uid" column="merchant_uid" />
		<result property="imp_uid" column="imp_uid" />
		<result property="state" column="state" />
		<result property="grade" column="grade" />
	</resultMap>
	
	<!-- 구독 정보 -->
	<resultMap type="com.spring.payment.SubscriptionVO" id="SubscriptionResultMap">
		<result property="subscribe_num" column="subscribe_num" />
		<result property="email" column="email" />
		<result property="grade" column="grade" />
		<result property="state" column="state" />
		<result property="count" column="count" />
	</resultMap>
	
	
	<!-- 구독자 정보(결제) -->
	<resultMap type="com.spring.payment.PMemberVO" id="PMemberResultMap">
		<result property="subscribe_num" column="subscribe_num" />
		<result property="email" column="email" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="grade" column="grade" />
		<result property="price" column="price" />
		<result property="point_price" column="point_price" />
		<result property="pay_price" column="pay_price" />
		<result property="state" column="state" />
	</resultMap>
	
	<!-- 관리자 페이지 결제테이블 불러오기 -->
	<select id="allSubscribe" parameterType="String" resultMap="PMemberResultMap">
		select s.subscribe_num, m.email, m.name, m.phone, s.grade, p.price, p.point_price, p.pay_price, s.state 
		from member m, subscribe s, subscribe_payment p 
		where m.email = s.email and s.subscribe_num = p.subscribe_num and m.subscribe = 'Y' and p.state = #{state}
	</select> 
	
	<!-- subscribe 테이블 insert (state 기본값 "구독대기" // 결제시 "구독중" 으로 변경필요)-->
	<insert id="insertSubscribe" parameterType="com.spring.payment.SubscriptionVO">
	<selectKey keyProperty="subscribe_num" resultType="int" order="BEFORE">
		SELECT SUBSCRIBE_SEQUENCE.nextval From DUAL
	</selectKey>
		INSERT INTO SUBSCRIBE (SUBSCRIBE_NUM, EMAIL, GRADE, COUNT)
		VALUES (#{subscribe_num}, #{email}, #{grade}, #{count})
	</insert>
	
	<!-- subscribe 테이블 -->
	<select id="getSubscribe" parameterType="String" resultMap="SubscriptionResultMap">
		SELECT * FROM SUBSCRIBE WHERE EMAIL=#{email}
	</select>
	
	<!-- subscribe_payment 테이블 insert (subscribe_num 받아오기)-->
	<insert id="insertPayment" parameterType="com.spring.payment.PaymentVO">
	<selectKey keyProperty="pay_num" resultType="int" order="BEFORE">
		SELECT SUBSCRIBE_PAY_SEQUENCE.nextval From DUAL
	</selectKey>
		INSERT INTO SUBSCRIBE_PAYMENT (PAY_NUM, SUBSCRIBE_NUM, PRICE, MERCHANT_UID, IMP_UID)
		VALUES (#{pay_num}, #{subscribe_num}, #{price}, #{merchant_uid}, #{imp_uid})
	</insert>
	
	<!-- 멤버 subscribe 컬럼 값 'Y'로 변경 -->
	<update id="updateMemberColumn" parameterType="String">
		UPDATE MEMBER SET SUBSCRIBE='Y' WHERE EMAIL=#{email} 
	</update>
	
	<!-- state, pay_price, merchant_uid 상태값 변경 (예약완료) -->
	<update id="updatePayState" parameterType="com.spring.payment.PaymentVO">
		UPDATE SUBSCRIBE_PAYMENT SET STATE='예약완료', PAY_PRICE=#{pay_price}, MERCHANT_UID=#{merchant_uid}
		WHERE SUBSCRIBE_NUM=#{subscribe_num} AND STATE='예약대기'
	</update>
	
	<!-- state, pay_price 상태값 변경 (예약대기) -->
	<update id="rePayState" parameterType="com.spring.payment.PaymentVO">
		UPDATE SUBSCRIBE_PAYMENT SET STATE='예약대기', PAY_PRICE=#{pay_price}
		WHERE SUBSCRIBE_NUM=#{subscribe_num} AND STATE='예약완료'
	</update>
	
	<!-- 결제되면 STATE 결제완료로 변경 (결제완료) -->
	<update id="paidState" parameterType="int">
		UPDATE SUBSCRIBE_PAYMENT SET STATE='결제완료'
		WHERE SUBSCRIBE_NUM=#{subscribe_num} AND STATE='예약완료'
	</update>	
	
	<!-- 예약취소 정보 (merchant_uid, subscribe_num 받아오기) -->
	<select id="selectCancel" parameterType="String" resultMap="PaymentResultMap">
		SELECT P.MERCHANT_UID, S.SUBSCRIBE_NUM FROM MEMBER M, SUBSCRIBE S, SUBSCRIBE_PAYMENT P
		WHERE M.EMAIL = S.EMAIL AND S.SUBSCRIBE_NUM = P.SUBSCRIBE_NUM AND M.EMAIL=#{email}
	</select>
	
	<!-- subscribe_payment 테이블 조회 -->
	<select id="selectSP" parameterType="com.spring.payment.PaymentVO" resultMap="PaymentResultMap">
		SELECT * FROM(
		SELECT ROWNUM RNUM, S.GRADE, P.PAY_NUM, P.SUBSCRIBE_NUM, P.PAY_DATE, P.PRICE, P.POINT_PRICE, P.STATE
		FROM MEMBER M, SUBSCRIBE S, SUBSCRIBE_PAYMENT P
		WHERE M.EMAIL = S.EMAIL AND S.SUBSCRIBE_NUM = P.SUBSCRIBE_NUM AND M.EMAIL=#{email}
		ORDER BY PAY_DATE DESC)
		<![CDATA[WHERE RNUM >=#{start} and RNUM<=#{end}]]> 
	</select>
	
	<select id="allSubscribe2" parameterType="map" resultMap="PMemberResultMap">
      select s.subscribe_num, m.email, m.name, m.phone, s.grade, p.price, p.point_price, p.pay_price 
      from member m, subscribe s, subscribe_payment p 
      where m.email = s.email and s.subscribe_num = p.subscribe_num and m.subscribe = 'Y' and p.state = '예약완료' and merchant_uid=#{merchant_uid}
    </select> 
   
    <update id="updateSubs">
    	update subscribe set state='구독중'
    	where subscribe_num=#{subscribe_num}
    </update>  
    
    <insert id="insertProductState" parameterType="map">
    <selectKey keyProperty="state_num" order="BEFORE" resultType="int">
   		select subscribe_ps_sequence.NEXTVAL from dual
   	</selectKey>
   		insert into product_state(state_num, subscribe_num, product_num, state, delivery_date, return_application) 
   		values(#{state_num}, #{subscribe_num}, #{product_num}, '배송전', #{date}, 'N')
    </insert>   
    
   <!-- <select id="getWishPnum" parameterType="map" resultType="int">
   select product_num from wishlist where email=#{email}
   </select> -->
   
   <select id="getWishPnum" parameterType="map" resultType="int">
   select product_num from wishlist where email=#{email} AND product_num NOT IN (
      select product_num from product where current_amount=0
   )
   </select>

   <select id="productAmountCheck" parameterType="map" resultType="int">
   select current_amount from product where product_num=#{product_num}
   </select>
   <update id="updateProductAmount" parameterType="map">
   update product set rental_amount=rental_amount+1, current_amount=current_amount-1 
   where product_num=#{product_num}
   </update>
   
   <select id="getReser" parameterType="map" resultType="int">
   select NVL(count(*), 0) from reservation where email=#{email} 
   </select>

   <delete id="deleteWish" parameterType="map">
   delete from wishlist where email=#{email} AND product_num=#{randomPnum}
   </delete>
   
   <!-- 반납횟수 초기화 -->
   <update id="updateCount" parameterType="map">
   		UPDATE SUBSCRIBE SET COUNT=#{count} WHERE EMAIL=#{email}
   </update>
   
   <!-- 차감예정 -> 차감으로 수정 -->
   <update id="updateMPstate" parameterType="String">
   		UPDATE MEMBER_POINT SET STATE='차감' WHERE EMAIL=#{email} AND REASON='차감'
   </update>
   
   <!-- 구독취소한 이용자인지 확인 -->
   <select id="checkSubCancel" parameterType="String" resultType="int">
   		SELECT COUNT(*) FROM SUBSCRIBE WHERE EMAIL=#{email} AND STATE='구독취소'
   </select>
   
   <!-- 구독취소한 이용자일 경우 이미 subscribe테이블에 존재 -> state값만 '구독대기'로 변경 -->
   <update id="updateRestate" parameterType="String">
    	update subscribe set state='구독대기'
    	where email = #{email} and state = '구독취소'
   </update> 

	<!-- 구독 취소 신청시 STATE 변경 -->
	<update id="cancelSub" parameterType="String">
		UPDATE SUBSCRIBE SET STATE='구독취소' WHERE EMAIL=#{email}
	</update>

	
	<!-- 취소 신청시 STATE 변경 -->
	<update id="cancelSub2" parameterType="String">
		UPDATE SUBSCRIBE SET STATE='구독중' WHERE EMAIL=#{email}
	</update>
	
	<!-- 구독등급 변경 신청 -->
	<insert id="insertChange" parameterType="map">		
		INSERT INTO C_GRADE
		VALUES(#{subscribe_num}, #{grade}, #{price})
	</insert>

	<!-- 등급변경 체크 -->
	<select id="checkCgrade" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM C_GRADE 
		WHERE SUBSCRIBE_NUM = (SELECT SUBSCRIBE_NUM FROM SUBSCRIBE WHERE EMAIL=#{email})
	</select>
	
	<!-- 등급변경 내역 조회 -->
	<select id="getCgrade" parameterType="String" resultType="String">
		SELECT GRADE FROM C_GRADE
		WHERE SUBSCRIBE_NUM = (SELECT SUBSCRIBE_NUM FROM SUBSCRIBE WHERE EMAIL=#{email})
	</select>
	
	<!-- 등급변경 취소 -->
	<delete id="deleteCancel" parameterType="String">
		DELETE C_GRADE WHERE SUBSCRIBE_NUM = (SELECT SUBSCRIBE_NUM FROM SUBSCRIBE WHERE EMAIL=#{email})
	</delete>
	
	<!-- subscribe테이블 grade 등급 변경 -->
	<update id="updateSgrade" parameterType="map">
		UPDATE SUBSCRIBE SET GRADE=#{regrade} WHERE EMAIL=#{email}
	</update>
	
	<!-- subscribe테이블 grade 조회 -->
	<select id="selectSgrade" parameterType="map" resultType="String">
		SELECT GRADE FROM SUBSCRIBE WHERE SUBSCRIBE_NUM=#{subscribe_num}
	</select>
	
	
	


	<select id="personalSharingCheck" parameterType="map" resultType="int">
	select NVL(count(*), 0) from product_share where product_num=#{product_num}
	</select>
	        
	<update id="personalSharingFund" parameterType="map">
	update product_share set share_amount=share_amount+1, current_amount=current_amount-1, total_accumulated_fund=total_accumulated_fund+accumulated_fund
	where product_num=#{product_num}
	</update>

	<select id="adminSelectWish" parameterType="map" resultType="int">
	select product_num from (
        select rownum rnum, product_num, current_amount from (
            select product_num, current_amount from product where category_l=#{grade} and current_amount!=0 order by current_amount desc
        )
	)where rnum=1
	</select>
	<insert id="adminInsertWish" parameterType="map">
	<selectKey keyProperty="wish_num" resultType="int" order="BEFORE">
	select wishlist_sequence.NEXTVAL from dual
	</selectKey>
	insert into wishlist values(#{wish_num}, #{email}, #{product_num}, sysdate)
	</insert>
	



</mapper>